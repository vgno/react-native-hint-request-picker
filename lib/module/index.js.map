{"version":3,"sources":["index.tsx"],"names":["NativeModules","DeviceEventEmitter","Platform","HintRequestPicker","Constants","getConstants","getPhoneNumber","Promise","resolve","reject","OS","addListener","PHONE_SELECTED_EVENT","listen","data","e","getGoogleAccount","EMAIL_SELECTED_EVENT"],"mappings":"AAGA,SAASA,aAAT,EAAwBC,kBAAxB,EAA4CC,QAA5C,QAA4D,cAA5D;AAgBA;AACA;AACA;AACA;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAwBH,aAA9B;AACA,MAAMI,SAAS,GAAGD,iBAAiB,CAACE,YAAlB,EAAlB;AACA,OAAO,MAAMC,cAAc,GAAG,YAAwC;AAClE,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIP,QAAQ,CAACQ,EAAT,KAAgB,SAApB,EAA+B;AAC3BD,MAAAA,MAAM,CAAC,2BAAD,CAAN;AACA;AACH;;AACD,QAAI;AACAR,MAAAA,kBAAkB,CAACU,WAAnB,CACIP,SAAS,CAACQ,oBADd,EAEI,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;AAClBN,QAAAA,OAAO,CAACM,IAAD,CAAP;AACH,OAJL;AAMAX,MAAAA,iBAAiB,CAACG,cAAlB;AACH,KARD,CAQE,OAAOS,CAAP,EAAU;AACRN,MAAAA,MAAM,CAACM,CAAD,CAAN;AACH;AACJ,GAhBM,CAAP;AAiBH,CAlBM;AAmBP,OAAO,MAAMC,gBAAgB,GAAG,YAAwC;AACpE,SAAO,IAAIT,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIP,QAAQ,CAACQ,EAAT,KAAgB,SAApB,EAA+B;AAC3BD,MAAAA,MAAM,CAAC,2BAAD,CAAN;AACA;AACH;;AACD,QAAI;AACAR,MAAAA,kBAAkB,CAACU,WAAnB,CACIP,SAAS,CAACa,oBADd,EAEI,SAASJ,MAAT,CAAgBC,IAAhB,EAAsB;AAClBN,QAAAA,OAAO,CAACM,IAAD,CAAP;AACH,OAJL;AAMAX,MAAAA,iBAAiB,CAACa,gBAAlB;AACH,KARD,CAQE,OAAOD,CAAP,EAAU;AACRN,MAAAA,MAAM,CAACM,CAAD,CAAN;AACH;AACJ,GAhBM,CAAP;AAiBH,CAlBM","sourcesContent":["/**\n * @flow\n */\nimport { NativeModules, DeviceEventEmitter, Platform } from 'react-native';\n\ntype PhoneResponseType = {\n    phoneNumber?: string;\n};\n\ntype EmailResponseType = {\n    email?: string;\n    id?: string;\n    givenName?: string;\n    name?: string;\n    familyName?: string;\n    profilePictureUri?: string;\n    accountType?: string;\n};\n\n// type HintRequestPickerType = {\n//     getPhoneNumber(): Promise<PhoneResponseType>;\n//     getGoogleAccount(): Promise<EmailResponseType>;\n// };\n\nconst { HintRequestPicker } = NativeModules;\nconst Constants = HintRequestPicker.getConstants();\nexport const getPhoneNumber = function (): Promise<PhoneResponseType> {\n    return new Promise((resolve, reject) => {\n        if (Platform.OS !== 'android') {\n            reject('Only Android is supported');\n            return;\n        }\n        try {\n            DeviceEventEmitter.addListener(\n                Constants.PHONE_SELECTED_EVENT,\n                function listen(data) {\n                    resolve(data);\n                }\n            );\n            HintRequestPicker.getPhoneNumber();\n        } catch (e) {\n            reject(e);\n        }\n    });\n};\nexport const getGoogleAccount = function (): Promise<EmailResponseType> {\n    return new Promise((resolve, reject) => {\n        if (Platform.OS !== 'android') {\n            reject('Only Android is supported');\n            return;\n        }\n        try {\n            DeviceEventEmitter.addListener(\n                Constants.EMAIL_SELECTED_EVENT,\n                function listen(data) {\n                    resolve(data);\n                }\n            );\n            HintRequestPicker.getGoogleAccount();\n        } catch (e) {\n            reject(e);\n        }\n    });\n};\n"]}